// Mocks generated by Mockito 5.4.5 from annotations
// in patientappointment/test/core/providers/appointment_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:patientappointment/core/models/appointment_model.dart' as _i3;
import 'package:patientappointment/core/providers/auth_provider.dart' as _i5;
import 'package:patientappointment/core/services/notification_service.dart'
    as _i7;
import 'package:patientappointment/data/repos/appointment_repository.dart'
    as _i2;
import 'package:timezone/timezone.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AppointmentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppointmentRepository extends _i1.Mock
    implements _i2.AppointmentRepository {
  MockAppointmentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Appointment> getAllAppointments() => (super.noSuchMethod(
        Invocation.method(
          #getAllAppointments,
          [],
        ),
        returnValue: <_i3.Appointment>[],
      ) as List<_i3.Appointment>);

  @override
  List<_i3.Appointment> getAppointmentsByStatus(
          _i3.AppointmentStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppointmentsByStatus,
          [status],
        ),
        returnValue: <_i3.Appointment>[],
      ) as List<_i3.Appointment>);

  @override
  List<_i3.Appointment> getUpcomingAppointments() => (super.noSuchMethod(
        Invocation.method(
          #getUpcomingAppointments,
          [],
        ),
        returnValue: <_i3.Appointment>[],
      ) as List<_i3.Appointment>);

  @override
  List<_i3.Appointment> getMissedAppointments() => (super.noSuchMethod(
        Invocation.method(
          #getMissedAppointments,
          [],
        ),
        returnValue: <_i3.Appointment>[],
      ) as List<_i3.Appointment>);

  @override
  List<_i3.Appointment> getCompletedAppointments() => (super.noSuchMethod(
        Invocation.method(
          #getCompletedAppointments,
          [],
        ),
        returnValue: <_i3.Appointment>[],
      ) as List<_i3.Appointment>);

  @override
  _i4.Future<void> addAppointment(_i3.Appointment? appointment) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAppointment,
          [appointment],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateAppointment(_i3.Appointment? appointment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAppointment,
          [appointment],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAppointment(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAppointment,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool isDoctorAvailable(
    String? doctorId,
    DateTime? dateTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isDoctorAvailable,
          [
            doctorId,
            dateTime,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [AuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProvider extends _i1.Mock implements _i5.AuthProvider {
  MockAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<bool> login(
    String? phone,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            phone,
            name,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateProfile(String? name) => (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [name],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> toggleAdminMode() => (super.noSuchMethod(
        Invocation.method(
          #toggleAdminMode,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i7.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> requestIOSPermissions() => (super.noSuchMethod(
        Invocation.method(
          #requestIOSPermissions,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> scheduleNotification({
    required int? id,
    required String? title,
    required String? body,
    required _i8.TZDateTime? scheduledDateTime,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotification,
          [],
          {
            #id: id,
            #title: title,
            #body: body,
            #scheduledDateTime: scheduledDateTime,
            #payload: payload,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelNotification(int? id) => (super.noSuchMethod(
        Invocation.method(
          #cancelNotification,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllNotifications,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
